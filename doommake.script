/****************************************************************************
 * DoomMake Build Script
 *
 * DoomMake employs a language called RookScript.
 * Documentation is included for this in the DoomTools docs folder.
 * All WadScript and DoomMake extensions are available here. 
 ****************************************************************************/

#include "scripts/doommake-lib.script"
#include "scripts/doommake-init.script"

/* ------------------------------------------------------------------------ */

/**
 * Cleans the build directory found in the properties.
 */
function doClean() {
	initBuild();
	return cleandir(getBuildDirectory());
}


/* ------------------------------------------------------------------------ */

#define SRC_DECOHACK        "src/decohack/main.dh"

/**
 * Calls DECOHack.
 * Creates patch.
 */
check function doPatch(budget) {
	initBuild();
	decohack(
		file(SRC_DECOHACK), 
		file(getBuildDirectory() + "/" + getPatchFile()), 
		budget
	);
}

/* ------------------------------------------------------------------------ */

#define SRC_DIR_MAPS     "src/maps"
#define MERGESCRIPT_MAPS "scripts/merge-maps.txt"

/**
 * Merges maps together.
 * Creates map WAD.
 */
function doMaps() {
	initBuild();
	verifydirs(SRC_DIR_MAPS);
	wadmerge(file(MERGESCRIPT_MAPS), [
		getBuildDirectory(),
		getMapsWAD()
	]);
}


/* ------------------------------------------------------------------------ */

#define SRC_DIR_ASSETS     "src/assets" 
#define MERGESCRIPT_ASSETS "scripts/merge-assets.txt"

/**
 * Cleans up the created asset WAD.
 */
check function cleanUpAssetWAD(wadpath) {
	wf = wadfile(wadpath);
	
	// Remove the sprite namespace if empty.
	sx = wadentryindex(wf, "SS_START");
	sy = wadentryindex(wf, "SS_END");
	if (sx !== null && (sy - sx === 1)) {
		wf->waddelete(wf->wadentryindex("SS_START"));
		wf->waddelete(wf->wadentryindex("SS_END"));
	}
	
	close(wf);
}

/**
 * Calls the merge script for merging maps.
 * Creates assets WAD.
 */
check function doAssets() {
	
	initBuild();
	verifydirs(SRC_DIR_ASSETS + "/_global");
	verifydirs(SRC_DIR_ASSETS + "/graphics");
	verifydirs(SRC_DIR_ASSETS + "/music");
	verifydirs(SRC_DIR_ASSETS + "/sounds");
	verifydirs(SRC_DIR_ASSETS + "/sprites");
	
	wadmerge(file(MERGESCRIPT_ASSETS), [
		getBuildDirectory(),
		getAssetsWAD()
	]);
	
	cleanUpAssetWAD(getBuildDirectory() + "/" + getAssetsWAD());
}


/* ------------------------------------------------------------------------ */

#define PROP_MAPTEXWAD      "doommake.file.maptex"
#define DEFAULT_MAPTEXWAD   "maptex.wad"

/**
 * Return the output map textures WAD.
 */
function getMapTexWad() {
	return prop(PROP_MAPTEXWAD, DEFAULT_MAPTEXWAD); 
}

/* ------------------------------------------------------------------------ */

/**
 * Scans the project for available texture WADs.
 */
#define SRC_DIR_TEXTUREWADS "src/wads/textures"

function scanTextureWADList() {
	return filelist(SRC_DIR_TEXTUREWADS, false, REGEX_WADFILES);
}

/* ------------------------------------------------------------------------ */

/**
 * Extracts textures from the project texture WADs using the maps.
 * Creates maptex WAD.
 */
check function doMapTextures() {
	initBuild();
	verifydirs(SRC_DIR_TEXTUREWADS);

	// Only do if maps were compiled.
	if (!fileexists(getBuildDirectory() + "/" + getMapsWad())) {
		println("No maps in `" + (getBuildDirectory() + "/" + getMapsWad()) + "`. Skipping texture extraction.");
		return;
	}

	textureWadFiles = scanTextureWadList();
	if (empty(textureWadFiles)) {
		println("WARNING: No texture WADs found in: " + SRC_DIR_TEXTUREWADS + ". Skipping texture extraction step.");
		return;
	}
	
	baseIwadPath = getIwad();
	if (empty(baseIwadPath))
		return error("NoIWAD", "An IWAD for this project was not set in properties: " + PROP_IWADPATH);

	outputWad = getBuildDirectory() + "/" + getMapTexWad();

	extractUsedMapTextures(
		baseIwadPath, 
		[getBuildDirectory() + "/" + getMapsWad()], 
		textureWadFiles, 
		outputWad
	);
}


/* ------------------------------------------------------------------------ */

#define PROP_RUN_EXE            "doommake.run.exe"
#define PROP_RUN_EXE_WORK       "doommake.run.exe.workdir"
#define PROP_RUN_SWITCH_IWAD    "doommake.run.switch.iwad"
#define DEFAULT_RUN_SWITCH_IWAD "-iwad"
#define PROP_RUN_SWITCH_FILE    "doommake.run.switch.file"
#define DEFAULT_RUN_SWITCH_FILE "-file"
#define PROP_RUN_SWITCH_DEH     "doommake.run.switch.deh"
#define DEFAULT_RUN_SWITCH_DEH  "-deh"

/**
 * Calls a port to run this project.
 * portType: If specified, then this looks for the properties that end with ".porttype".
 * wadList: List of WAD files to add.
 * dehFile: DEH file to add.
 */
check function doRun(portType, wadList, dehFile) {

	portType = empty(portType) ? "" : "." + portType;

	exepath =    prop(PROP_RUN_EXE + portType);
	exeworkdir = prop(PROP_RUN_EXE_WORK + portType) ?: fileparent(exepath);
	iwadSwitch = prop(PROP_RUN_SWITCH_IWAD + portType, DEFAULT_RUN_SWITCH_IWAD);
	fileSwitch = prop(PROP_RUN_SWITCH_FILE + portType, DEFAULT_RUN_SWITCH_FILE);
	dehSwitch =  prop(PROP_RUN_SWITCH_DEH + portType, DEFAULT_RUN_SWITCH_DEH);
	
	if (empty(exepath))
		return error("NoEXE", "Executable not specified. Requires a property to be set: " + PROP_RUN_EXE + portType);
	
	if (!fileexists(exepath))
		return error("NoEXE", "Executable could not be found: " + exepath);
	if (!fileexists(exeworkdir))
		return error("NoEXE", "Working directory for executable not found: " + exeworkdir);

	if (empty(iwadSwitch))
		return error("RunError", "IWAD switch not specified. Requires a property to be set: " + PROP_RUN_SWITCH_IWAD + portType);
	if (empty(fileSwitch))
		return error("RunError", "FILE switch not specified. Requires a property to be set: " + PROP_RUN_SWITCH_FILE + portType);
	if (empty(dehSwitch))
		return error("RunError", "DEH switch not specified. Requires a property to be set: " + PROP_RUN_SWITCH_DEH + portType);

	arguments = [];

	iwadPath = getIwad();
	if (empty(iwadPath))
		return error("NoIWAD", "An IWAD for this project was not set in properties: " + PROP_IWADPATH);

	arguments->listadd(iwadSwitch);
	arguments->listadd(iwadPath->filecanonpath());

	if (!empty(wadList)) {
		arguments->listadd(fileSwitch);
		each (w : wadList)
			arguments->listadd(w->filecanonpath());
	}

	if (!empty(dehFile)) {
		arguments->listadd(dehSwitch);
		arguments->listadd(dehFile->filecanonpath());
	}
	
	return execresult(exec(
		exepath, arguments, envvars(), exeworkdir, stdout(), stderr(), stdin()
	));
}


/* ------------------------------------------------------------------------ */

#define MERGESCRIPT_RELEASE "scripts/merge-release.txt"
#define SRC_WADINFO "src/wadinfo.txt"

/**
 * Initializes the build directory.
 */
function initDist() {
	return verifydirs(getDistDirectory());
}

/**
 * Copies the WAD info to the build directory as its TXT file.
 * Throws error if unsuccessful.
 */
function copyProjectTXT(destfile) {
	srcfile = file(SRC_WADINFO);
	println("Copying " + srcfile + " to " + destfile + "...");
	return copyfile(srcfile, destfile, true);
}

/**
 * Builds every component for the project release.
 */
check function doAll() {
	initBuild();
	doPatch(false);
	doMaps();
	doAssets();
	doMapTextures();
}

/**
 * Merges all components into the project file and creates the distributable.
 */
check function doRelease() {

	wadmerge(file(MERGESCRIPT_RELEASE), [
		getBuildDirectory()
		,getProjectWad()
		,getPatchFile()
		,getMapsWad()
		,getAssetsWAD()
		,getMapTexWad()
	]);

	// Assemble project archive.
	initDist();
	copyProjectTXT(getBuildDirectory() + "/" + getProjectTXT());
	copyProjectTXT(getDistDirectory() + "/" + getProjectTXT());
	zipProject([
		getBuildDirectory() + "/" + getProjectWAD(), 
		getBuildDirectory() + "/" + getProjectTXT()
	]);
	
	println("Done!");
}


/****************************************************************************
 * TARGET: init
 ****************************************************************************
 * Initializes this project.
 * doommake init
 ****************************************************************************/
check entry init(args) {
	doInit(args);
}


/****************************************************************************
 * TARGET: clean
 ****************************************************************************
 * Cleans the build directory.
 * doommake clean
 ****************************************************************************/
check entry clean(args) {
	doClean();
}


/*****************************************************************************
 * TARGET: patch
 *****************************************************************************
 * Compiles the DeHackEd patch (and shows the budget).
 * doommake patch
 ****************************************************************************/
check entry patch(args) {
	doPatch(true);
}

/*****************************************************************************
 * TARGET: maps
 *****************************************************************************
 * Merges the maps WAD.
 * doommake maps
 ****************************************************************************/
check entry maps(args) {
	doMaps();
}

/*****************************************************************************
 * TARGET: assets
 *****************************************************************************
 * Merges the assets WAD.
 * doommake assets
 ****************************************************************************/
check entry assets(args) {
	doAssets();
}


/*****************************************************************************
 * TARGET: maptextures
 *****************************************************************************
 * Reads the map WADs and texture resources and exports them to a WAD 
 * of used textures.
 * doommake maptextures
 ****************************************************************************/
check entry mapTextures(args) {
	doMapTextures();
}

/*****************************************************************************
 * TARGET: run
 *****************************************************************************
 * Runs this project.
 * doommake run
 ****************************************************************************/
check entry run(args) {

	wadList = [
		getBuildDirectory() + "/" + getProjectWAD()
	];
	
	dehFile = getBuildDirectory() + "/" + getPatchFile();

	return doRun(args[0], wadList, dehFile);
}

/****************************************************************************
 * TARGET: all
 ****************************************************************************
 * Builds all parts of the project. 
 * doommake all
 ****************************************************************************/
check entry all(args) {
	doAll();
}


/****************************************************************************
 * TARGET: release
 ****************************************************************************
 * Creates a release and distribution.
 * doommake release
 ****************************************************************************/
check entry release(args) {
	doRelease();
}


/****************************************************************************
 * TARGET: make
 ****************************************************************************
 * Default make target.
 * doommake
 ****************************************************************************/
check entry make(args) {
	doInit();
	doAll();
	doRelease();
}
